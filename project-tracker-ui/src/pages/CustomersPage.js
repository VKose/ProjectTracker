import { useEffect, useState } from 'react';
import api from '../api/axios';
import Navbar from '../components/Navbar';
import { getUserFromToken } from '../utils/auth';
import { useNavigate } from 'react-router-dom';

function CustomersPage() {
  
  const [customers, setCustomers] = useState([]);                   // M√º≈üteri listesi
  const [form, setForm] = useState({ name: '', contactInfo: '' });  // Form alanlarƒ± (yeni m√º≈üteri ekleme/g√ºncelleme i√ßin)
  const [editMode, setEditMode] = useState(false);                  // G√ºncelleme modu a√ßƒ±k mƒ±?
  const [editId, setEditId] = useState(null);                       // Hangi m√º≈üteri d√ºzenleniyor(id)?  
  const [message, setMessage] = useState('');                       // Ba≈üarƒ± / hata mesajƒ±
  const user = getUserFromToken();                                  // Giri≈ü yapan kullanƒ±cƒ±
  const navigate = useNavigate();                                   // Sayfa y√∂nlendirme

  // Sayfa y√ºklendiƒüinde m√º≈üterileri √ßek
  useEffect(() => {
    if (!user) {
      navigate('/login'); // Giri≈ü yapƒ±lmamƒ±≈üsa login sayfasƒ±na y√∂nlendir
      return;
    }

    api.get('/customer')
      .then(res => setCustomers(res.data))
      .catch(() => setMessage("‚ùå M√º≈üteriler alƒ±namadƒ±."));
  }, [navigate, user]); 

  // Form input deƒüi≈üikliklerini yakala
  const handleInputChange = (e) => {
    setForm(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  // M√º≈üteri ekleme veya g√ºncelleme
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      if (editMode) {
        // G√ºncelleme i≈ülemi
        await api.put(`/customer/${editId}`, form);
        setMessage("‚úÖ M√º≈üteri g√ºncellendi.");
      } else {
        // Yeni m√º≈üteri ekleme
        await api.post('/customer', form);
        setMessage("‚úÖ M√º≈üteri eklendi.");
      }

      // Listeyi yeniden √ßek ve formu sƒ±fƒ±rla
      const res = await api.get('/customer');
      setCustomers(res.data);
      setForm({ name: '', contactInfo: '' });
      setEditMode(false);
      setEditId(null);
    } catch {
      setMessage("‚ùå ƒ∞≈ülem ba≈üarƒ±sƒ±z.");
    }
  };

  // M√º≈üteri silme
  const handleDelete = async (id) => {
    if (!window.confirm("Bu m√º≈üteri silinsin mi?")) return;

    try {
      await api.delete(`/customer/${id}`);
      setCustomers(prev => prev.filter(c => c.id !== id));
    } catch {
      alert("Silme i≈ülemi ba≈üarƒ±sƒ±z.");
    }
  };

  // Yetki kontrol√º
  const isAdmin = user?.role === 'Admin';                               // Admin ise altta silme i≈ülemi i√ßin
  const canEdit = user?.role === 'Admin' || user?.role === 'Manager';   // D√ºzenleyebilen Admin, Manager

  return (
    <>
      <Navbar />

      <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
        <h2>üè¢ M√º≈üteri Y√∂netimi</h2>

        {/* Bilgilendirme mesajƒ± */}
        {message && <p style={{ color: message.startsWith('‚úÖ') ? 'green' : 'red' }}>{message}</p>}

        {/* M√º≈üteri Ekleme/G√ºncelleme Formu */}
        {canEdit && (
          <form onSubmit={handleSubmit} style={{ marginBottom: '30px' }}>
            <h3>{editMode ? '‚úèÔ∏è M√º≈üteri G√ºncelle' : '‚ûï M√º≈üteri Ekle'}</h3>

            <input
              type="text"
              name="name"
              placeholder="M√º≈üteri Adƒ±"
              value={form.name}
              onChange={handleInputChange}
              required
              style={{ padding: '8px', width: '100%', marginBottom: '10px' }}
            />

            <input
              type="text"
              name="contactInfo"
              placeholder="ƒ∞leti≈üim Bilgileri (E-mail)"
              value={form.contactInfo}
              onChange={handleInputChange}
              required
              style={{ padding: '8px', width: '100%', marginBottom: '10px' }}
            />

            <button
              type="submit"
              style={{
                padding: '10px 20px',
                backgroundColor: '#007bff',
                color: 'white',
                border: 'none'
              }}
            >
              {editMode ? 'G√ºncelle' : 'Ekle'}
            </button>
          </form>
        )}

        {/* M√º≈üteri Listesi Tablosu */}
        <table border="1" cellPadding="10" style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr>
              <th>ID</th>
              <th>Ad</th>
              <th>ƒ∞leti≈üim</th>
              {canEdit && <th>ƒ∞≈ülem</th>}
            </tr>
          </thead>
          <tbody>
            {customers.map(c => (
              <tr key={c.id}>
                <td>{c.id}</td>
                <td>{c.name}</td>
                <td>{c.contactInfo}</td>
                {canEdit && (
                  <td>
                    {/* M√º≈üteriyi d√ºzenle */}
                    <button
                      onClick={() => {
                        setForm({ name: c.name, contactInfo: c.contactInfo });
                        setEditId(c.id);
                        setEditMode(true);
                      }}
                      style={{ marginRight: '10px' }}
                    >
                      D√ºzenle
                    </button>

                    {/* Adminse silme butonu g√∂r√ºn√ºr */}
                    {isAdmin && (
                      <button
                        onClick={() => handleDelete(c.id)}
                        style={{ backgroundColor: 'red', color: 'white' }}
                      >
                        Sil
                      </button>
                    )}
                  </td>
                )}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  );
}

export default CustomersPage;
